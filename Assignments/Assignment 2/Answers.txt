
(Use of NumPy package)

1. Write a program to test if any of the elements of a given array is non zero.

	import numpy as np
		
		x = np.array([1, 0, 0, 0])
		print("Original array:")
		print(x)
		print("Test if any of the elements of a given array is non-zero:")
		print(np.any(x))
		x = np.array([0, 0, 0, 0])
		print("Original array:")
		print(x)
		print("Test if any of the elements of a given array is non-zero:")
		print(np.any(x))

2. Write a program to create an array of 10 zeros,10 ones, 10 fives.
o/p

An array of 10 zeros:
[ 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]
An array of 10 ones:
[ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]
An array of 10 fives:
[ 5.  5.  5.  5.  5.  5.  5.  5.  5.  5.]    
	
	import numpy as np
		
		array=np.zeros(10)
		print("An array of 10 zeros:")
		print(array)
		array=np.ones(10)
		print("An array of 10 ones:")
		print(array)
		array=np.ones(10)*5
		print("An array of 10 fives:")
		print(array)



3. Write a program to create a 3x3 identity matrix.
o/p
 3x3 matrix:
[[ 1.  0.  0.]
 [ 0.  1.  0.]
 [ 0.  0.  1.]]  

	import numpy as np
		
		array_2D=np.identity(3)
		print('3x3 matrix:')
		print(array_2D)
	
4. Write a program to save a given array to a text file and load it.

	import numpy as np
	import os
		
		x = np.arange(12).reshape(4, 3)
		print("Original array:")
		print(x)
		header = 'col1 col2 col3'
		np.savetxt('temp.txt', x, fmt="%d", header=header) 
		print("After loading, content of the text file:")
		result = np.loadtxt('temp.txt')
		print(result)

5. Write a program to create a array with values ranging from 12 to 38.

	import numpy as np
		x = np.arange(12, 38)

6. print(x)Write a program to convert a list and tuple into arrays.

	import numpy as np

		my_list = [1, 2, 3, 4, 5, 6, 7, 8]
		print("List to array: ")
		print(np.asarray(my_list))
		my_tuple = ([8, 4, 6], [1, 2, 3])
		print("Tuple to array: ")
		print(np.asarray(my_tuple))

7. Write a program to find the number of elements of an array, length of one array element in bytes and total bytes consumed by the elements.

	import numpy as np
		x = np.array([1,2,3], dtype=np.float64)
		print("Size of the array: ", x.size)
		print("Length of one array element in bytes: ", x.itemsize)
		print("Total bytes consumed by the elements of the array: ", x.nbytes)

8. Write a program to get the unique elements of an array.
o/p
[[1 1] 
[2 3]]	- [1 2 3]

	import numpy as np
	
		x = np.array([10, 10, 20, 20, 30, 30])
		print("Original array:")
		print(x)
		print("Unique elements of the above array:")
		print(np.unique(x))
		x = np.array([[1, 1], [2, 3]])
		print("Original array:")
		print(x)
		print("Unique elements of the above array:")
		print(np.unique(x))

9.   Write a program to find the indices of the maximum and minimum values along the given axis of an array.
	
	import numpy as np

		x = np.array([1, 2, 3, 4, 5, 6])
		print("Original array: ",x)
		print("Maximum Values: ",np.argmax(x))
		print("Minimum Values: ",np.argmin(x))

10.  Write a program to Create a 1-D array of 30 evenly spaced elements between 2.5. and 6.5, inclusive.

	import numpy as np
		x = np.linspace(2.5, 6.5, 30)
		print(x)

11. Write a program to display numpy array elements of floating values with given precision.
o/p:
[ 0.26153123 0.52760141 0.5718299 0.5927067 0.7831874 0.69746349 
0.35399976 0.99469633 0.0694458 0.54711478] 

Print array values with precision 3: 
[ 0.262 0.528 0.572 0.593 0.783 0.697 0.354 0.995 0.069 0.547] 

	import numpy as np
		
		x=np.array([ 0.26153123, 0.52760141, 0.5718299, 0.5927067, 0.7831874, 0.69746349,             
         	0.35399976, 0.99469633, 0.0694458, 0.54711478]) 
		print("Original array elements:")
		print(x)
		print("Print array values with precision 3:")
		np.set_printoptions(precision=3)
		print(x)

12. Remove all non-numeric elements of the said array
[[ 1. 2. 3.] 
[ 7. 8. 9.] 
[ 1. 0. 1.]]

	import numpy as np
	
		x = np.array([[1,2,3], [4,5,np.nan], [7,8,9], [True, False, True]])
		print("Original array:")
		print(x)
		print("Remove all non-numeric elements of the said array")
		print(x[~np.isnan(x).any(axis=1)])  
		
13. Write a program to remove all rows in a numpy array that contain non-numeric values.
[[ 1. 2. 3.] 
[ 4. 5. nan]
[ 7. 8. 9.] 
[ 1. 0. 1.]] 
	import numpy as np

		arra = np.array([[ 1,  1,  0],
		                 [ 0,  0,  0],
		                 [ 0,  2,  3],
		                 [ 0,  0,  0],
		                 [ 0, -1,  1],
		                 [ 0,  0,  0]])

		print("Original array:")
		print(arra)
		temp = {(0, 0, 0)}
		result = []

		for idx, row in enumerate(map(tuple, arra)):
		    if row not in temp:
		        result.append(idx)
			print("\nNon-zero unique rows:")
		print(arra[result])

14. Write a program to extract upper triangular part of a numpy matrix. 

	import numpy as np
		num = np.arange(18)
		arr1 = np.reshape(num, [6, 3])
		print("Original array:")
		print(arr1)
		result  = arr1[np.triu_indices(3)]
		print("\nExtract upper triangular part of the said array:")
		print(result)
		result  = arr1[np.triu_indices(2)]	
		print("\nExtract upper triangular part of the said array:")
		print(result)

15.  Write a program to find the k smallest values of a given numpy array.
	
	import numpy as np
		array1 = np.array([1, 7, 8, 2, 0.1, 3, 15, 2.5])
		print("Original arrays:")
		print(array1)
		k = 4
		result = np.argpartition(array1, k)
		print("\nk smallest values:")
		print(array1[result[:k]])
		
16.   Write a program to calculate the sum of all columns of a 2D numpy array.
	
	import numpy as np
		num = np.arange(36)
		arr1 = np.reshape(num, [4, 9])
		print("Original array:")
		print(arr1)
		result  = arr1.sum(axis=0)
		print("\nSum of all columns:")
		print(result)

17.  Write a program to add two arrays A and B of sizes (3,3) and (,3).

	import numpy as np
		A = np.ones((3,3))
		B = np.arange(3)
		print("Original array:")
		print("Array-1")
		print(A)
		print("Array-2")
		print(B)
		print("A + B:")
		new_array = A + B
		print(new_array)

18. Write a program to find the nearest value from a given value in an array.

	import numpy as np

		x = np.arange(100)
		print("Original array:")
		print(x)
		a = np.random.uniform(0,100)
		print("Value to compare:")
		print(a)
		index = (np.abs(x-a)).argmin()
		print(x[index])

19. Write a program to generate six random integers between 10 and 30.
	
	import numpy as np
	x = np.random.randint(low=10, high=30, size=6)
	print(x)

20.  Write a program to compute the cross product of two given vectors.

	import numpy as np
		p = [[1, 0], [0, 1]]
		q = [[1, 2], [3, 4]]
		print("original matrix:")
		print(p)
		print(q)
		result1 = np.cross(p, q)
		result2 = np.cross(q, p)
		print("cross product of the said two vectors(p, q):")
		print(result1)
		print("cross product of the said two vectors(q, p):")
		print(result2)
